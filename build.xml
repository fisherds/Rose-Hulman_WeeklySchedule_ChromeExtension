<?xml version="1.0" encoding="utf-8"?>
 
<project name="Rose-Hulman Grid Extension" default="build">

    <!-- Compiler Directory -->
    <property name="closure-compiler.dir" 
    	value="${basedir}/../../closure-compiler" />
	
    <!-- The compiler jar file -->
    <property name="closure-compiler.jar" 
    	value="${closure-compiler.dir}/build/compiler.jar" />
	
    <!-- Library Directory -->
    <property name="closure-library.dir" 
    	value="${basedir}/../../closure-library" />

    <!-- Output Build Directory -->
    <property name="build.dir" 
    	value="${basedir}/build" />
	
    <!-- output wrapper function (don't understand this to be honest) -->
    <property name="outputwrapper" 
    	value="(function(){%output%})();" />
	
    <!-- Compile this file first plus anything it requires -->
    <property name="inputFileToCompile" value="${basedir}/js/entry.js" />
    
    
	<macrodef name="generate-template">
		<attribute name="inputfile" />
		<attribute name="outputPathFormat" />
		<sequential>
			<java jar="${closure-templates.dir}/build/SoyToJsSrcCompiler.jar"
				fork="true" failonerror="true" logError="true">
				<arg line='--outputPathFormat "@{outputPathFormat}"' />
				<arg line="--shouldGenerateJsdoc" />
				<arg line="--shouldProvideRequireSoyNamespaces" />
				<arg line='"@{inputfile}"' />
			</java>
		</sequential>
	</macrodef>
	
	<!-- Options for the compilationlevels:
		WHITESPACE_ONLY, SIMPLE_OPTIMIZATIONS, ADVANCED_OPTIMIZATIONS" -->
		
	<macrodef name="closure-compile">
		<attribute name="inputfile" />
		<attribute name="outputfile" />
		<attribute name="compilerjarfile" default="${closure-compiler.jar}" />
		<attribute name="compilationlevel" default="SIMPLE_OPTIMIZATIONS" />
		<attribute name="outputmode" default="compiled" />
		<element name="extraflags" optional="yes"/>
		<element name="extrapaths" optional="yes"/>
		<sequential>
			<exec executable="python" failonerror="true" logError="true">
				<arg value="${closure-library.dir}/closure/bin/calcdeps.py" />
				<arg line='-i "@{inputfile}"' />
				<arg line='--output_file "@{outputfile}"' />
				<arg line='-p "${closure-library.dir}"' />
				<extrapaths />
				<arg line="-o @{outputmode}" />
				<arg line='-c "@{compilerjarfile}"' />
				<arg line='-f "--compilation_level=@{compilationlevel}"' />
				<extraflags />
			</exec>
		</sequential>
	</macrodef>
		
    <target name="clean" description="deletes all files created by this script">
    	<delete dir="${build.dir}" />
    </target>

	<target name="replicate">
		<copy todir="${build.dir}/files">
			<fileset dir=".">
				<include name="html/**" />
				<include name="manifest.json" />
				<include name="images/**" />
				<include name="styles/**" />
			</fileset>
		</copy>
	</target>

    <target name="rosegrid-compiled"
    	description="generates roseGrid-compiled.js">
    	<mkdir dir="${build.dir}" />
		<mkdir dir="${build.dir}/files" />
    	<closure-compile
    		inputfile="${inputFileToCompile}"
    		outputfile="${build.dir}/files/rosegrid-compiled.js"
    		compilationlevel="SIMPLE_OPTIMIZATIONS" >
    		<extrapaths>
    			<arg line='-p "${basedir}/js"' />
    		</extrapaths>
    		<extraflags>
    			<arg line='-f "--output_wrapper=${outputwrapper}"' />
    			<arg line='-f "--formatting=PRETTY_PRINT"' />
    			<arg line='-f "--warning_level=VERBOSE"' />
    			<!--arg line='-f "XXjscomp_error=checkTypes"' -->
    		</extraflags>
    	</closure-compile>
    </target>
	
	<target name="build" depends="rosegrid-compiled" />
    
</project>